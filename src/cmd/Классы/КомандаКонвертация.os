
Процедура ОписаниеКоманды(Команда) Экспорт

	Команда.Аргумент("REPO", ".", "Путь к git-репозиторию")
				.ТСтрока();

	Команда.Опция("dump", "src/ConfigDumpInfo.xml", 
				"Путь к файлу ConfigDump* внутри репозитория для получения соотвествия Id-Name. Файл должен содержать строки вида 'name=""Имя"" id=""Гуид""'")
				.ТСтрока();
				
	Команда.Опция("in orig", "src/Ext/ParentConfigurations.bin", 
				"Относительный путь к файлу ParentConfigurations.bin внутри репозитория")
				.ТСтрока();
				
	Команда.Опция("out mod", "src/Ext/ParentConfigurations_mod.bin", 
				"Относительный путь к сконвертированному файлу внутри репозитория")
				.ТСтрока();
				
	Команда.Опция("dump-cache", "", 
				"Сохранять пары Name-Id, полученные из дампа, в отдельный файл (например, src/ConfigID.xml)")
				.ТСтрока();
				
	Команда.Опция("clear", Ложь, 
				"Удалять устаревшие ГУИДЫ без сопоставления с метаданными")
				.Флаг();
				
КонецПроцедуры

// Выполняет логику команды
Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	Лог = ПараметрыПриложения.Лог();

	КаталогРепозитория            = Команда.ЗначениеАргумента("REPO");
	ПутьКФайлуПоддержки           = Команда.ЗначениеОпции("in");
	ПутьКНовомуФайлуПоддержки     = Команда.ЗначениеОпции("out");
	ПутьКФайлуДампа               = Команда.ЗначениеОпции("dump");
	ПутьКФайлуКэшаИдентификаторов = Команда.ЗначениеОпции("dump-cache");
	ОчищатьГуидыБезСопоставлений  = Команда.ЗначениеОпции("clear");
	
	Файл = Новый Файл(КаталогРепозитория);
	КаталогРепозитория = Файл.ПолноеИмя;
	
	УстановитьТекущийКаталог(КаталогРепозитория);
	
	Файл = Новый Файл(ПутьКФайлуПоддержки);
	Если Файл.Размер() < 20 Тогда
		Лог.Информация("Конвертация файла поддержки не выполнена. Вероятно конфигурация снята с поддержки.");
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ПутьКНовомуФайлуПоддержки);
	Если Файл.Существует() И Файл.ЭтоКаталог() Тогда
		Лог.Ошибка("Файл --out=%1 не может быть каталогом", ПутьКНовомуФайлуПоддержки);
		ВызватьИсключение "";
	КонецЕсли;

	// тест записи для проверки валидности пути, если передали "/" и сломали прерыдущую проверку
	ОбщегоНазначения.ЗаписатьТекстВФайл(ПутьКНовомуФайлуПоддержки, "Тест имени файла");
	УдалитьФайлы(ПутьКНовомуФайлуПоддержки);

	ИмяВременногоФайлаИсходный = ПолучитьИмяВременногоФайла();
	КопироватьФайл(ПутьКФайлуПоддержки, ИмяВременногоФайлаИсходный);

	ИмяВременногоФайлаЦелевой = ПолучитьИмяВременногоФайла();

	Метаданные = Новый Метаданные();
	Метаданные.ОпределитьИменаМетаданных(ПутьКФайлуДампа);
	Если ЗначениеЗаполнено(ПутьКФайлуКэшаИдентификаторов) Тогда
		Метаданные.СоздатьКэш(ПутьКФайлуКэшаИдентификаторов, Истина);
	КонецЕсли;

	Конвертор = Новый Конвертор(КаталогРепозитория);
	Ошибка = Конвертор.ВыполнитьКонвертацию(Метаданные, ИмяВременногоФайлаИсходный, ИмяВременногоФайлаЦелевой, ОчищатьГуидыБезСопоставлений);
	
	Если НЕ ПустаяСтрока(Ошибка) Тогда
		УдалитьФайлы(ИмяВременногоФайлаИсходный);
		УдалитьФайлы(ИмяВременногоФайлаЦелевой);
		Лог.Ошибка(Ошибка);
		Возврат;
	КонецЕсли;

	ПереместитьФайл(ИмяВременногоФайлаЦелевой, ПутьКНовомуФайлуПоддержки);
	Лог.Информация("Выполнена конвертация файла поддержки %1 в файл %2", ПутьКФайлуПоддержки, ПутьКНовомуФайлуПоддержки);
	
	УдалитьФайлы(ИмяВременногоФайлаИсходный);

КонецПроцедуры

